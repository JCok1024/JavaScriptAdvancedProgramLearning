//记录一些学习《JavaScript高级程序设计》时出问题的情况；
//2017.03.20创建




//2017.03.20， 13.3
Q问题：
    <input type="button" value="myBtn2" id="myBtn2/">
    console.log提示Cannot read property 'addEventListener' of null
    把标签结束的/打入id的双引号内，导致myBtn2的事件绑定全部出错；

A解决办法：
    在
    http://stackoverflow.com/questions/39943465/440-uncaught-typeerror-cannot-set-property-onclick-of-null
    中找到答案，判断是DOM获取的元素出错；
    再次检查input标签的拼写，解决了问题。

I归纳：
    先检查拼写，再检查逻辑；





//2017.03.21,  13.4
Q问题：
    eventUtil.addHandler(window,"resize",handlerResize);
    resize移动中会频繁执行handlerResize。

A解决办法：
    1 在
    http://stackoverflow.com/questions/5534363/why-does-the-jquery-resize-event-fire-twice
    中找到debounce()和throttle()的概念，并实现代码;
    完成代码后发现
    var handlerResize = debounce(console.log("window resized."), 500, true);
    console.log提示func.apply is not a function.；

    2 在
    http://stackoverflow.com/questions/33386657/cannot-read-property-apply-of-undefined
    中找到You just forgot to declare vm ；
    发现我的func即console.log或alert()并没有声明为function；

    3 修改后
    var resizeMsg = function(){
        console.log("window resized. ");
    };
    var handlerResize = debounce(resizeMsg, 500, true);
    eventUtil.addHandler(window,"resize",handlerResize);
    按dalay执行handlerResize

I归纳：
    debounce()限制函数只能在空闲一段时间后触发一次；
    throttle()限制函数在一段时间内只能触发若干次；
    在重复触发的事件中应考虑这两个函数以限制触发次数；





//2017.03.22 13.4
Q问题：
    莫名其妙的Cannot read property addHandler of null.

A解决方法：
    将引用addHandler的代码段重新打一次；

I归纳：
    拼写错误问题严重！





//2017.03.23 13.4
Q问题：
    按照书上代码执行readystatechande事件，在所有的新版浏览器中均无反应；

A解决方法XXX：
    在
    https://segmentfault.com/a/1190000004466407
    找到W3C已将此事件归入xhr中，仅IE6~8支持;
    此问题暂未解决，待继续学习；





//2017.03.24 13.4
Q1问题：
    在移动浏览器中touchend无法触发，但touchstart和touchmove正常；

A解决方法：
    发现安卓4.x中touchmove后touchend无法触发需要touchemove.preventDefault()后手写touchmove事件；
    拼写检查正确后，更换Chrome/FF的响应式设计模式，模拟的所有机型正常；
    发现是360极速浏览器的响应式设计模式有问题，不论哪种机型都无法正常触发touchend事件；

I归纳：
    deleteText("fxxk 360！");
    移动开发时尝试更换浏览器，避免使用非主流浏览器进行初步的测试；
        




//2017.03.26 14.1
Q1问题：
    对于blur和change事件的理解；

A解决方法：
    blur包含change，因为change在以下2种情况不能触发：
    1 在失去焦点但没有对元素进行操作时；
    2 在对元素进行操作但其值没有改变且失去焦点时；

I归纳：
    1 change的触发范围更小，目前我认为用blur的情况会更多；
    2 而如果需要跳过blur来监听输入操作，我会选择用keypress / keydown，而不是change；



Q2问题：
    1 自动切换焦点的函数中，eventUtil.addHandler(...) is not a function；
    2 解除私有作用域并重新更正拼写后，只切换了一次焦点；

A解决方法：
    1 先解除了私有作用域，修正了maxlength的拼写为maxLength；
      函数可以运行，也没有报错，但只切换了一次焦点；

    2 发现flag的位置为第二层if，导致了只return了1次；

    3 发现在该段私有作用域之前，上一段语句没有打上;;;;;;;;;;这是导致报错的根本原因；

I归纳：
    1 拼写，什么都别说了，认真看源代码，认真敲；
    2 养成先打格式再填充内容的编码习惯，写完函数很容易忘记加上分号；
    3 出现什么BUG，先从自己身上找问题，再从自己的代码找答案，实在不行再搜索，最后才去提问谢谢；





//2017.03.27 14.3
Q1问题：
    需要实现select在window.load运行一次，每次change时运行一次；
    但将变量声明如下：
        var selectedIndex = selLocation.selectedIndex;
        var selectedOption = selLocation.options[selectedIndex];
        console.log("Selected index: " + selectedIndex + " Selected text: " + selectedOption.text
                    + "Selected value: " + selectedOption.value);
        eventUtil.addHandler(selLocation, "change", function(event){
        console.log("Selected index: " + selectedIndex + " Selected text: " + selectedOption.text
                    + "Selected value: " + selectedOption.value);
        });
    每次change返回的都是默认的第一个option；

A解决方法：
    将变量的副本放入eventUtil.addHandler内，但过于繁琐，将过程封装进handlerSelChange()里：
        var handlerSelChange = function(event){
        var selectedIndex = selLocation.selectedIndex;
        var selectedOption = selLocation.options[selectedIndex];
        console.log("Selected index: " + selectedIndex + " Selected text: " + selectedOption.text
                    + "Selected value: " + selectedOption.value);
        };
        handlerSelChange();
        eventUtil.addHandler(selLocation, "change", handlerSelChange);

    window.load时调用一次，再在eventUtil.addHandler里加入该函数，简洁可行；

I归纳：
    涉及到作用域的问题，selectedIndex和selectedOption在eventUtil.addHandler里没有定义；
    因此在eventUtil.addHandler里调用时获取的值是作用域链的上一层，就是它们被声明时的值，即第一个option；





//2017.03.29 15.2
Q1问题：
    在实现使用图像数据并调用getImageData()时，控制台报错：
    Uncaught SecurityError: 
        Failed to execute 'getImageData' on 'CanvasRenderingContext2D': 
            The canvas has been tainted by cross-origin data.

A解决方法：
	这是涉及到跨域使用canvas绘图的问题；
	尝试使用image.crossOrigin = "anonymous"属性无效；

	在	http://www.cnblogs.com/WardLin-blog/p/5950261.html
	和	http://blog.csdn.net/molaifeng/article/details/42293509
	找到：由于chromium的浏览器中，本地图片是没有域的，因此会被判断成跨域传输；
	此时的解决办法有：
	1 将本地图片上传到服务器并将其设置在同一域中（子域也不行）；
	2 放弃使用chromium调试本地图片的getImageData()，使用FF / IE10+；
	3 使用PHP将img转换成字符串嵌入html；

I归纳：
	这个问题让我停滞了2个小时……
	暴露的问题有：
	1 不懂URL和服务器，没法理解域相关的问题；
	2 搜索问题的能力有待加强；





//2017.04.04 18.1
Q1问题：
    在XML的DOM操作中 var children = document.getElementsByTagName("child");
    对象主体写成document是错误的；

A解决方法：
    把document改成xmldom，即原文中定义过的XML文档对象；

I归纳：
    XML和HTML有许多不同之处，注意区分；





//2017.04.07 21.1
Q1问题：
    在Ajax操作时，浏览器提示:
    XMLHttpRequest cannot load file:///D:/Documents/HTMLproject/ProfessionalProgram/00blankTestScript.js. 
        Cross origin requests are only supported for protocol schemes: 
        http, data, chrome, chrome-extension, https, chrome-extension-resource.

A解决方法：
    在浏览器快捷方式的目标位置中加入：“ --allow-file-access-from-files”

I归纳：
    异域问题





//2017.04.12. 22.5
Q1问题：
    在拖放对象时控制台报错：
    Cannot read property 'indexOf' of undefined

A解决方法：
    简单查了一下没有得到类似的问题答案；
    又记起最简单的错误：拼写错误；
    把包含indexOf的那一行重新写了一次，解决；

I归纳：
    fxxk typing wrong!





//2017.04.16 23.3
Q1问题：
    在本地Chrome（及所有chromiun）无法通过document.cookie获取cookie；
    在IE / FF中可以正常获取，SF未知；

I归纳：
    Chrome不支持读取本地cookie；



Q2问题：
    在IE / FF中调用SubCookieUtil对象无法get到子cookie的值；
    返回      undefined and ; data
    而不是     Nicholas and Pro JS

A解决方法：
    尝试从SubCookieUtil.getAll()中插入console.log(cookieStart + "+" + cookieEnd)检测索引；
    返回7+-1
    说明cookieEnd的索引获取存在问题；

    插入console.log(document.cookie);
    返回name=; data=name=Nicholas&book=Pro%20JS
    data后并没有以;结束，而name=;是上次cookie的残余；
    说明是document.cookie的记录与我的SubCookieUtil的方法不匹配；
    书上也说document.cookie会返回      name1=value1;name2=value2;name3=value3等；
    最后并没有以;结束；

    尝试改变cookieEnd的获取方法：
    发现我的代码接下来是：
        if(cookieEnd > -1){
            cookieEnd = document.cookie.length;
        }
    而书上是：
        if(cookieEnd == -1){
            cookieEnd = document.cookie.length;
        }
    瞬间明白问题……问题解决√
    该判断语句是就是解决目标cookie作为最后一条cookie时的方法

I归纳：
    感谢抄书抄错让我纠结了一个多小时，用以脑回路清理和发呆；





//2017.04.21 6.2
Q1问题：
    function Father(){
        this.colors = ["red", "green", "blue"],
        this.sayColor = function(){
            console.log(this.colors);
        };
    }
    function Child(){}
    Child.prototype = new Father();

    var child1 = new Child();
    child1.sayColor(); // ["red", "green", "blue"] 原始值

    child1.colors.push("black"); // 属性修改
    var child2 = new Child();
    child2.sayColor(); // ["red", "green", "blue", "black"]
    child1.sayColor(); // ["red", "green", "blue", "black"]

    使用Chrome和FF打开页面后，在第一次sayColor()时，返回的却是["red", "green", "blue", "black"];
    而刷新页面后正常；

A解决方法：
    在Segmentfault和stackoverflow找到答案：
    http://stackoverflow.com/questions/4057440/is-chromes-javascript-console-lazy-about-evaluating-arrays
    至于为什么Chrome和FF都有同样的问题，可能是它们的求值实现方法是一样的吧；

    这是console.log的惰性求值导致的结果，由于没有归入API，各个浏览器对此的实现方法不一样；
    要想打开后即为正常结果，可将输出方式改为：
    1 console.log(this.colors.toString()); // 会变成string类型，对嵌套数组支持不好；
    2 console.log(this.colors.concat()); // 复制一个数组副本，但遇到嵌套数组可能输出的值不正确；
    3 console.log(JSON.stringify(this.colors)); // 推荐，不会改变输出的类型和内容；
    总之避免直接输出数组或对象类型；